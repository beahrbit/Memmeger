openapi: 3.0.1
info:
  title: MemmegerOneAPI
  version: v1
paths:
  /api/Event:
    get:
      tags:
        - Event
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      tags:
        - Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          text/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Event'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            text/json:
              schema:
                $ref: '#/components/schemas/Event'
    put:
      tags:
        - Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          text/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Event'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            text/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/Event/GetEventById:
    get:
      tags:
        - Event
      parameters:
        - name: eventuuid
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Event'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            text/json:
              schema:
                $ref: '#/components/schemas/Event'
  '/api/Event/GetEventsOfUser/{useruuid}':
    get:
      tags:
        - Event
      parameters:
        - name: useruuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /api/Event/GetEventmemberByEventId:
    get:
      tags:
        - Event
      parameters:
        - name: eventuuid
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Eventuser'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Eventuser'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Eventuser'
  '/api/Event/{id}':
    delete:
      tags:
        - Event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Event'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            text/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/Membership:
    get:
      tags:
        - Membership
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
    post:
      tags:
        - Membership
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
          text/json:
            schema:
              $ref: '#/components/schemas/Member'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Event'
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            text/json:
              schema:
                $ref: '#/components/schemas/Event'
  '/api/Membership/{eventId}/{userId}':
    delete:
      tags:
        - Membership
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Member'
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
            text/json:
              schema:
                $ref: '#/components/schemas/Member'
  /api/User:
    get:
      tags:
        - User
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/json:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          text/json:
            schema:
              $ref: '#/components/schemas/User'
          application/*+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/User/GetUserById:
    get:
      tags:
        - User
      parameters:
        - name: useruuid
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/User/GetUserByEmail:
    get:
      tags:
        - User
      parameters:
        - name: email
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
  '/api/User/{id}':
    delete:
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
components:
  schemas:
    Event:
      type: object
      properties:
        eventId:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
          nullable: true
        location:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        entryCode:
          type: string
          nullable: true
        entryLink:
          type: string
          nullable: true
      additionalProperties: false
    Eventuser:
      type: object
      properties:
        eventId:
          type: string
          nullable: true
        userId:
          type: string
          nullable: true
        invitationState:
          type: string
          nullable: true
        role:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
      additionalProperties: false
    Member:
      type: object
      properties:
        eventId:
          type: string
          nullable: true
        userId:
          type: string
          nullable: true
        invitationState:
          type: string
          nullable: true
        role:
          type: string
          nullable: true
      additionalProperties: false
    User:
      type: object
      properties:
        userId:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false